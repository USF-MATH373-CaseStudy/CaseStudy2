format_theme
world %>%
filter(region %in% c("USA", "Canada", "Mexico")) %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group), fill = "darkgray") +
draw_na_flight_curve +
draw_city_points(cities_na) +
draw_city_labels(cities_na) +
draw_sf_point +
draw_sf_label +
coord_fixed(1.3) +
theme_minimal() +
draw_color_legend +
draw_size_legend +
scale_fill_brewer(palette = "Set2") +
scale_x_continuous(limits = c(-170, -50)) +
format_theme
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(magrittr)
library(zoo)
library(ggplot2)
library(scales)
library(maps)
library(mapdata)
library(grid)
## Set the working dir according to who is working
curr_wd <- strsplit(getwd(), "/")[[1]]
if ("chunheisiu" %in% curr_wd) {
setwd("/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/BSDS_100/USF-BSDS100-CaseStudy")
} else if ("jacquessham" %in% curr_wd){
setwd("/Users/jacquessham/Documents/GitHub/USF-BSDS100-CaseStudy")
} else {
wd <- readline(prompt = "You're not Jacques or Charles! Enter the path to the data: ")
setwd(wd)
}
## Read the data
data <- read.csv("Air_Traffic_Passenger_Statistics.csv")
# Rename the column names
names(data) <- c("date", "operAirline", "operCode", "airline", "code", "isDomestic",
"region", "type", "category", "terminal", "area", "pax")
# Convert isDomestic to boolean
data$isDomestic %<>% recode("Domestic" = T, "International" = F)
# Reformat the dates into Date objects
data$date %<>%
as.character() %>%
as.yearmon("%Y%m") %>%
as.Date()
# Get month and year values
data %<>%
mutate(month = date %>% format("%m") %>% factor(labels = month.name),
year = date %>% format("%Y") %>% as.numeric())
# Remove data from 2005 for easy comparison
data %<>% filter(year != 2005)
data$region %<>% recode("Central America" = "Latin America",
"South America" = "Latin America")
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code, code for variable "airline"
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
## terminal: SFO terminal
## area: area within SFO terminal
## pax: passenger count of given row
data %>%
ggplot() +
geom_bar(aes(x = year, y = pax / 1000000, fill = month), stat = "identity") +
scale_x_continuous(name = "Year", breaks = seq(2006, 2017, by = 1)) +
scale_y_continuous(name = "Passengers (Millions)") +
scale_fill_discrete(name = "Month")
# Load the world map and cities
world <- map_data("world")
cities <- world.cities
# Retrieve the information of SF
sf <- world.cities %>%
filter(name == "San Francisco" & country.etc == "USA")
# Derive the cities and corresponding regions
cities %<>%
filter(
(name == "Adelaide" & country.etc == "Australia") |
(name == "La Paz" & country.etc == "Bolivia") |
(name %in% c("Saint Louis", "La Ronge",
"Riyadh", "Mexico City", "Shenzhen", "Ostrava"))
) %>%
mutate(region =
ifelse(name == "Adelaide", "Australia / Oceania",
ifelse(name == "Saint Louis", "US",
ifelse(name == "La Ronge", "Canada",
ifelse(name == "La Paz", "Latin America",
ifelse(name == "Riyadh", "Middle East",
ifelse(name == "Mexico City", "Mexico",
ifelse(name == "Shenzhen", "Asia",
ifelse(name == "Ostrava", "Europe", NA))))))))
) %>%
full_join(y = data %>%
mutate(region = as.character(region)) %>%
group_by(region, type) %>%
summarize(pax = sum(pax)), by = "region") %>%
mutate(
origin.lat = ifelse(type == "Enplaned", sf$lat, lat),
origin.long = ifelse(type == "Enplaned", sf$long, long),
dest.lat = ifelse(type == "Enplaned", lat, sf$lat),
dest.long = ifelse(type == "Enplaned", long, sf$long)
) %>%
filter(type != "Thru / Transit")
draw_sf_point <- geom_point(x = sf$long, y = sf$lat, color = "red", size = 3)
draw_sf_label <- geom_text(aes(x = sf$long, y = sf$lat, label = "SFO"),
hjust = 1, nudge_x = -5, color = "red", size = 3)
draw_color_legend <- scale_color_discrete(name = "Activity Type",
labels = c("Arriving SFO", "Departing SFO"))
draw_size_legend <- scale_size_continuous(name = "Passenger Count", trans = "log10")
# Functions for drawing curves, points and labels
draw_flight_curve <- function(d) {
geom_curve(data = d %>% filter(type %in% c("Deplaned", "Enplaned")),
aes(x = origin.long, y = origin.lat,
xend = dest.long, yend = dest.lat,
color = type, size = pax),
curvature = 0.5, lineend = "round",
alpha = 0.75, arrow = arrow(length = unit(0.025, "npc")))
}
draw_city_points <- function(d) {
return (geom_point(data = d, aes(x = long, y = lat), color = "black", size = 3))
}
draw_city_labels <- function(d) {
return (geom_text(data = d, aes(x = long, y = lat, label = region),
hjust = 0, nudge_x = 3.5, nudge_y = -1,
color = "black", size = 3))
}
format_theme <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank(),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = 0),
legend.title = element_text(face = "bold")
)
cities_na <- cities %>% filter(region %in% c("US", "Canada", "Mexico"))
world %>%
filter(region %in% c("USA", "Canada", "Mexico")) %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group), fill = "darkgray") +
draw_flight_curve(cities_na) +
draw_city_points(cities_na) +
draw_city_labels(cities_na) +
draw_sf_point +
draw_sf_label +
coord_fixed(1.3) +
theme_minimal() +
draw_color_legend +
draw_size_legend +
scale_fill_brewer(palette = "Set2") +
scale_x_continuous(limits = c(-170, -50)) +
format_theme
# Geom objects for drawing static objects
draw_sf_point <- geom_point(x = sf$long, y = sf$lat, color = "red", size = 3)
draw_sf_label <- geom_text(aes(x = sf$long, y = sf$lat, label = "SFO"),
hjust = 1, nudge_x = -5, color = "red", size = 3)
draw_color_legend <- scale_color_discrete(name = "Activity Type",
labels = c("Arriving SFO", "Departing SFO"))
draw_size_legend <- scale_size_continuous(name = "Passenger Count", trans = "log10", labels = comma)
# Functions for drawing curves, points and labels
draw_flight_curve <- function(d) {
geom_curve(data = d %>% filter(type %in% c("Deplaned", "Enplaned")),
aes(x = origin.long, y = origin.lat,
xend = dest.long, yend = dest.lat,
color = type, size = pax),
curvature = 0.5, lineend = "round",
alpha = 0.75, arrow = arrow(length = unit(0.025, "npc")))
}
draw_city_points <- function(d) {
return (geom_point(data = d, aes(x = long, y = lat), color = "black", size = 3))
}
draw_city_labels <- function(d) {
return (geom_text(data = d, aes(x = long, y = lat, label = region),
hjust = 0, nudge_x = 3.5, nudge_y = -1,
color = "black", size = 3))
}
format_theme <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank(),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = 0),
legend.title = element_text(face = "bold")
)
cities_na <- cities %>% filter(region %in% c("US", "Canada", "Mexico"))
world %>%
filter(region %in% c("USA", "Canada", "Mexico")) %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group), fill = "darkgray") +
draw_flight_curve(cities_na) +
draw_city_points(cities_na) +
draw_city_labels(cities_na) +
draw_sf_point +
draw_sf_label +
coord_fixed(1.3) +
theme_minimal() +
draw_color_legend +
draw_size_legend +
scale_fill_brewer(palette = "Set2") +
scale_x_continuous(limits = c(-170, -50)) +
format_theme
cities_na <- cities %>% filter(region %in% c("US", "Canada", "Mexico"))
world %>%
filter(region %in% c("USA", "Canada", "Mexico")) %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group), fill = "darkgray") +
draw_flight_curve(cities_na) +
draw_city_points(cities_na) +
draw_city_labels(cities_na) +
draw_sf_point +
draw_sf_label +
coord_fixed(1.3) +
theme_minimal() +
draw_color_legend +
draw_size_legend +
scale_fill_brewer(palette = "Set2") +
scale_x_continuous(limits = c(-170, -50)) +
format_theme
knitr::opts_chunk$set(echo = F)
# Geom objects for drawing static objects
draw_sf_point <- geom_point(x = sf$long, y = sf$lat, color = "red", size = 3)
draw_sf_label <- geom_text(aes(x = sf$long, y = sf$lat, label = "SFO"),
hjust = 1, nudge_x = -5, color = "red", size = 3)
draw_color_legend <- scale_color_discrete(name = "Activity Type",
labels = c("Arriving SFO", "Departing SFO"))
draw_size_legend <- scale_size_continuous(trans = "log10", legend = NA)
# Geom objects for drawing static objects
draw_sf_point <- geom_point(x = sf$long, y = sf$lat, color = "red", size = 3)
draw_sf_label <- geom_text(aes(x = sf$long, y = sf$lat, label = "SFO"),
hjust = 1, nudge_x = -5, color = "red", size = 3)
draw_color_legend <- scale_color_discrete(name = "Activity Type",
labels = c("Arriving SFO", "Departing SFO"))
draw_size_legend <- scale_size_continuous(trans = "log10", guide = F)
# Functions for drawing curves, points and labels
draw_flight_curve <- function(d) {
geom_curve(data = d %>% filter(type %in% c("Deplaned", "Enplaned")),
aes(x = origin.long, y = origin.lat,
xend = dest.long, yend = dest.lat,
color = type, size = pax),
curvature = 0.5, lineend = "round",
alpha = 0.75, arrow = arrow(length = unit(0.025, "npc")))
}
draw_city_points <- function(d) {
return (geom_point(data = d, aes(x = long, y = lat), color = "black", size = 3))
}
draw_city_labels <- function(d) {
return (geom_text(data = d, aes(x = long, y = lat, label = region),
hjust = 0, nudge_x = 3.5, nudge_y = -1,
color = "black", size = 3))
}
format_theme <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank(),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = 0),
legend.title = element_text(face = "bold")
)
cities_na <- cities %>% filter(region %in% c("US", "Canada", "Mexico"))
world %>%
filter(region %in% c("USA", "Canada", "Mexico")) %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group), fill = "darkgray") +
draw_flight_curve(cities_na) +
draw_city_points(cities_na) +
draw_city_labels(cities_na) +
draw_sf_point +
draw_sf_label +
coord_fixed(1.3) +
theme_minimal() +
draw_color_legend +
draw_size_legend +
scale_fill_brewer(palette = "Set2") +
scale_x_continuous(limits = c(-170, -50)) +
format_theme
cities_intl <- cities %>% filter(!(region %in% c("US", "Canada", "Mexico")))
world %>%
filter(region != "Antarctica") %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group), fill = "darkgray") +
draw_flight_curve(cities_intl) +
draw_city_points(cities_intl) +
draw_city_labels(cities_intl) +
draw_sf_point +
draw_sf_label +
coord_fixed(1.3) +
theme_minimal() +
draw_color_legend +
draw_size_legend +
scale_x_continuous(limits = c(-170, 200)) +
scale_y_continuous(limits = c(-60, 90)) +
format_theme
cities_intl <- cities %>% filter(!(region %in% c("US", "Canada", "Mexico")))
world %>%
filter(region != "Antarctica") %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group), fill = "darkgray") +
draw_flight_curve(cities_intl) +
draw_city_points(cities_intl) +
draw_city_labels(cities_intl) +
draw_sf_point +
draw_sf_label +
coord_fixed(1.3) +
theme_minimal() +
draw_color_legend +
draw_size_legend +
scale_x_continuous(limits = c(-170, 200)) +
scale_y_continuous(limits = c(-60, 90)) +
format_theme
draw_enplane_labels <- function(d) {
return (geom_text(data = d %>% filter(type == ("Enplaned")),
aes(x = long, y = lat, label = pax, color = type),
hjust = 0, nudge_x = 3.5, nudge_y = -3, size = 3))
}
cities_na <- cities %>% filter(region %in% c("US", "Canada", "Mexico"))
world %>%
filter(region %in% c("USA", "Canada", "Mexico")) %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group), fill = "darkgray") +
draw_flight_curve(cities_na) +
draw_city_points(cities_na) +
draw_city_labels(cities_na) +
draw_enplane_labels(cities_na) +
draw_sf_point +
draw_sf_label +
coord_fixed(1.3) +
theme_minimal() +
draw_color_legend +
draw_size_legend +
scale_fill_brewer(palette = "Set2") +
scale_x_continuous(limits = c(-170, -50)) +
format_theme
e
draw_enplaned_labels <- function(d) {
return (geom_text(data = d %>% filter(type == ("Enplaned")),
aes(x = long, y = lat, label = pax, color = type),
hjust = 0, nudge_x = 3.5, nudge_y = -2, size = 3))
}
draw_deplaned_labels <- function(d) {
return (geom_text(data = d %>% filter(type == ("Deplaned")),
aes(x = long, y = lat, label = pax, color = type),
hjust = 0, nudge_x = 3.5, nudge_y = -3, size = 3))
}
cities_na <- cities %>% filter(region %in% c("US", "Canada", "Mexico"))
world %>%
filter(region %in% c("USA", "Canada", "Mexico")) %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group), fill = "darkgray") +
draw_flight_curve(cities_na) +
draw_city_points(cities_na) +
draw_city_labels(cities_na) +
draw_enplaned_labels(cities_na) +
draw_deplaned_labels(cities_na)
draw_sf_point +
draw_sf_label +
coord_fixed(1.3) +
theme_minimal() +
draw_color_legend +
draw_size_legend +
scale_fill_brewer(palette = "Set2") +
scale_x_continuous(limits = c(-170, -50)) +
format_theme
cities_na <- cities %>% filter(region %in% c("US", "Canada", "Mexico"))
world %>%
filter(region %in% c("USA", "Canada", "Mexico")) %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group), fill = "darkgray") +
draw_flight_curve(cities_na) +
draw_city_points(cities_na) +
draw_city_labels(cities_na) +
draw_enplaned_labels(cities_na) +
draw_deplaned_labels(cities_na) +
draw_sf_point +
draw_sf_label +
coord_fixed(1.3) +
theme_minimal() +
draw_color_legend +
draw_size_legend +
scale_fill_brewer(palette = "Set2") +
scale_x_continuous(limits = c(-170, -50)) +
format_theme
# Set up variables
data.train <- dropVars(data.train)
library(tidyverse)
library(magrittr)
library(ISLR)
library(tree)
setwd("/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/MATH_373/CaseStudy/CaseStudy2")
# Read training and testing data
data.train <- read.csv("OnlineNewsPopularityTraining.csv", header = T)
data.test <- read.csv("OnlineNewsPopularityTest.csv", header = T)
# Function for dropping variables
dropVars <- function(df) {
return (dplyr::select(df, -c(shares, url, timedelta)))
}
# Set up variables
data.train <- dropVars(data.train)
data.test <- dropVars(data.test)
data.train.class <- data.train$popular
data.test.class <- data.test$popular
length_data.train <- dim(data.train)[1]
# Classification tree
tree.train <- tree(popular ~ ., data.train)
summary(tree.train)
plot(tree.train)
text(tree.train, pretty = 0)
tree.pred <- predict(tree.train, data.test, type = "class")
# Classification tree
tree.train <- tree(as.factor(popular) ~ ., data.train)
summary(tree.train)
plot(tree.train)
text(tree.train, pretty = 0)
tree.pred <- predict(tree.train, data.test, type = "class")
tree.pred
# Classification tree
tree.train <- tree(as.factor(popular) ~ ., data = data.train)
summary(tree.train)
plot(tree.train)
text(tree.train, pretty = 0)
as.factor(data.train.class)
library(tidyverse)
library(magrittr)
library(ISLR)
library(tree)
setwd("/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/MATH_373/CaseStudy/CaseStudy2")
# Read training and testing data
data.train <- read.csv("OnlineNewsPopularityTraining.csv", header = T)
data.test <- read.csv("OnlineNewsPopularityTest.csv", header = T)
# Function for dropping variables
dropVars <- function(df) {
return (dplyr::select(df, -c(shares, url, timedelta)))
}
# Set up variables
data.train <- dropVars(data.train)
data.test <- dropVars(data.test)
data.train.class <- data.train$popular
data.test.class <- data.test$popular
length_data.train <- dim(data.train)[1]
# Classification tree
tree.train <- tree(as.factor(popular) ~ ., data = data.train)
summary(tree.train)
plot(tree.train)
plot(tree.train)
plot(tree.train)
plot(tree.train)
text(tree.train, pretty = 0)
# Classification tree
tree.train <- tree(popular ~ ., data = data.train)
summary(tree.train)
plot(tree.train)
text(tree.train, pretty = 0)
tree.pred <- predict(tree.train, data.test, type = "class")
# Set up variables
data.train <- dropVars(data.train)
asFactor <- function(df) {
df$popular <-  as.factor(df$popular)
}
# Set up variables
data.train <- dropVars(data.train)
# Read training and testing data
data.train <- read.csv("OnlineNewsPopularityTraining.csv", header = T)
data.test <- read.csv("OnlineNewsPopularityTest.csv", header = T)
Read training and testing data
data.train <- read.csv("OnlineNewsPopularityTraining.csv", header = T)
data.test <- read.csv("OnlineNewsPopularityTest.csv", header = T)
# Function for dropping variables
dropVars <- function(df) {
return (dplyr::select(df, -c(shares, url, timedelta)))
}
asFactor <- function(df) {
df$popular <-  as.factor(df$popular)
}
# Set up variables
data.train <- dropVars(data.train)
data.test <- dro
data.test <- dropVars(data.test)
asFactor(data.train)
asFactor(data.test)
as.factor(df$popular)
as.factor(data.train$popular)
data.train$popular <- data.train$popular
data.train$popular <- as.factor(data.train$popular)
data.train$popular <- as.factor(data.train$popular)
data.test$popular <- as.factor(data.test$popular)
data.train.class <- data.train$popular
data.test.class <- data.test$popular
length_data.train <- dim(data.train)[1]
# Classification tree
tree.train <- tree(popular ~ ., data = data.train)
summary(tree.train)
plot(tree.train)
text(tree.train, pretty = 0)
tree.pred <- predict(tree.train, data.test, type = "class")
View(asFactor)
# Classification tree
tree.train <- tree(data.train$popular ~ ., data = data.train)
summary(tree.train)
plot(tree.train)
text(tree.train, pretty = 0)
